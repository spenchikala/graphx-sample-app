
---------------------------------------------------------------------------------------------------------
//
// Reference:
// http://spark.apache.org/docs/latest/graphx-programming-guide.html
//
---------------------------------------------------------------------------------------------------------
//
//  Launch Spark Scala Shell:
//

c:
set JAVA_HOME=c:\dev\java\jdk1.6.0_45
set PATH=%PATH%;%JAVA_HOME%\bin

set SCALA_HOME=C:\dev\languages\scala
set PATH=%PATH%;%SCALA_HOME%\bin

set SPARK_HOME=c:\dev\servers\spark-1.0.1-bin-hadoop2
set PATH=%PATH%;%SPARK_HOME%\bin

cd c:\dev\projects\BigDataBootCampLabs\SparkWorkshop\SparkWorkshopLabs\graphx-sample-app

spark-shell.cmd

sc


// Spark UI:
http://localhost:4040


---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------
//
// The Property Graph
//

// Import the Scala RDD classes.
import org.apache.spark._
import org.apache.spark.graphx._
import org.apache.spark.rdd.RDD

val vertexArray = Array(
	(1L, ("Alice", 28)),
	(2L, ("Bob", 27)),
	(3L, ("Charlie", 65)),
	(4L, ("David", 42)),
	(5L, ("Ed", 55)),
	(6L, ("Fran", 50))
)

val edgeArray = Array(
	Edge(2L, 1L, 7),
	Edge(2L, 4L, 2),
	Edge(3L, 2L, 4),
	Edge(3L, 6L, 3),
	Edge(4L, 1L, 1),
	Edge(5L, 2L, 2),
	Edge(5L, 3L, 8),
	Edge(5L, 6L, 3)
)

//
// Using sc.parallelize (introduced in the Spark tutorial) construct the following RDDs from the vertexArray and edgeArray variables.
//

val vertexRDD: RDD[(Long, (String, Int))] = sc.parallelize(vertexArray)

val edgeRDD: RDD[Edge[Int]] = sc.parallelize(edgeArray)

val graph: Graph[(String, Int), Int] = Graph(vertexRDD, edgeRDD)

// Graph Views

// Use graph.vertices to display the names of the users that are at least 30 years old. The output should contain (in addition to lots of log messages):

// Solution
graph.vertices.filter { case (id, (name, age)) => age > 30 }.collect.foreach {
	case (id, (name, age)) => println(s"$name is $age")
}

//
// Use the graph.triplets view to display who likes who.
//
for (triplet <- graph.triplets.collect) {
	println(s"${triplet.srcAttr._1} likes ${triplet.dstAttr._1}")
}

//
// If someone likes someone else more than 5 times than that relationship is getting pretty serious. For extra credit, find the lovers.
//
for (triplet <- graph.triplets.filter(t => t.attr > 5).collect) {
	println(s"${triplet.srcAttr._1} loves ${triplet.dstAttr._1}")
}


val inDegrees: VertexRDD[Int] = graph.inDegrees


// Define a class to more clearly model the user property
case class User(name: String, age: Int, inDeg: Int, outDeg: Int)

// Create a user Graph
val initialUserGraph: Graph[User, Int] = graph.mapVertices{ case (id, (name, age)) => User(name, age, 0, 0) }


// Fill in the degree information
val userGraph = initialUserGraph.outerJoinVertices(initialUserGraph.inDegrees) {
	case (id, u, inDegOpt) => User(u.name, u.age, inDegOpt.getOrElse(0), u.outDeg)
}.outerJoinVertices(initialUserGraph.outDegrees) {
	case (id, u, outDegOpt) => User(u.name, u.age, u.inDeg, outDegOpt.getOrElse(0))
}


//
// Using the degreeGraph print the number of people who like each user:
//

for ((id, property) <- userGraph.vertices.collect) {
	println(s"User $id is called ${property.name} and is liked by ${property.inDeg} people.")
}

//
// Print the names of the users who are liked by the same number of people they like.
//

userGraph.vertices.filter {
	case (id, u) => u.inDeg == u.outDeg
}.collect.foreach {
	case (id, property) => println(property.name)
}

// Find the oldest follower for each user
val oldestFollower: VertexRDD[(String, Int)] = userGraph.mapReduceTriplets[(String, Int)](
	// For each edge send a message to the destination vertex with the attribute of the source vertex
	edge => Iterator((edge.dstId, (edge.srcAttr.name, edge.srcAttr.age))),
  
  	// To combine messages take the message for the older follower
  	(a, b) => if (a._2 > b._2) a else b
)
//
// Display the oldest follower for each user:
//
userGraph.vertices.leftJoin(oldestFollower) { (id, user, optOldestFollower) =>
	optOldestFollower match {
    	case None => s"${user.name} does not have any followers."
    	case Some((name, age)) => s"${name} is the oldest follower of ${user.name}."
  	}
}.collect.foreach { case (id, str) => println(str) }


//
// As an exercise, try finding the average follower age of the followers of each user.
//

val averageAge: VertexRDD[Double] = userGraph.mapReduceTriplets[(Int, Double)](
	// map function returns a tuple of (1, Age)
	edge => Iterator((edge.dstId, (1, edge.srcAttr.age.toDouble))),
	// reduce function combines (sumOfFollowers, sumOfAge)
	(a, b) => ((a._1 + b._1), (a._2 + b._2))
).mapValues((id, p) => p._2 / p._1)


// Display the results
userGraph.vertices.leftJoin(averageAge) { (id, user, optAverageAge) =>
	optAverageAge match {
		case None => s"${user.name} does not have any followers."
		case Some(avgAge) => s"The average age of ${user.name}\'s followers is $avgAge."
	}
}.collect.foreach { case (id, str) => println(str) }

//
// Subgraph
//

val olderGraph = userGraph.subgraph(vpred = (id, user) => user.age >= 30)

// compute the connected components
val cc = olderGraph.connectedComponents

// display the component id of each user:
olderGraph.vertices.leftJoin(cc.vertices) {
	case (id, user, comp) => s"${user.name} is in component ${comp.get}"
}.collect.foreach{ case (id, str) => println(str) }

---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------
//
// Graph Algorithms:
//

// PageRank:

// Import the Scala RDD classes.
import org.apache.spark._
import org.apache.spark.graphx._
import org.apache.spark.rdd.RDD

// Load the edges as a graph
val graph = GraphLoader.edgeListFile(sc, "graphx/data/followers.txt")

// Run PageRank
val ranks = graph.pageRank(0.0001).vertices

ranks.count()

ranks.take(5)

// Print the Ranks result
println(ranks.collect().mkString("\n"))

// Get the users.
val users = sc.textFile("graphx/data/users.txt").map {
	line => val fields = line.split(",")
	(fields(0).toLong, fields(1))
}

// Get number of entries in users RDD.
users.count()

// Print the users
println(users.collect().mkString("\n"))

// Join the ranks with the usernames
val ranksByUsername = users.join(ranks).map {
	case (id, (username, rank)) => (username, rank)
}

// Print the result
println(ranksByUsername.collect().mkString("\n"))

---------------------------------------------------------------------------------------------------------

// Page Rank - Take 2.

// Load my user data and parse into tuples of user id and attribute list
val users = (sc.textFile("graphx/data/users.txt")
	.map(line => line.split(",")).map( parts => (parts.head.toLong, parts.tail) ))

// Parse the edge data which is already in userId -> userId format
val followerGraph = GraphLoader.edgeListFile(sc, "graphx/data/followers.txt")

// Attach the user attributes
val graph = followerGraph.outerJoinVertices(users) {
	case (uid, deg, Some(attrList)) => attrList
	// Some users may not have attributes so we set them as empty
	case (uid, deg, None) => Array.empty[String]
}

// Restrict the graph to users with usernames and names
val subgraph = graph.subgraph(vpred = (vid, attr) => attr.size == 2)

// Compute the PageRank
val pagerankGraph = subgraph.pageRank(0.001)

// Get the attributes of the top pagerank users
val userInfoWithPageRank = subgraph.outerJoinVertices(pagerankGraph.vertices) {
	case (uid, attrList, Some(pr)) => (pr, attrList.toList)
	case (uid, attrList, None) => (0.0, attrList.toList)
}

println(userInfoWithPageRank.vertices.top(5)(Ordering.by(_._2._1)).mkString("\n"))

---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------
Connected Components:

// Load the graph as in the PageRank example
val graph = GraphLoader.edgeListFile(sc, "graphx/data/followers.txt")

// Find the connected components
val cc = graph.connectedComponents().vertices

// Join the connected components with the usernames
val users = sc.textFile("graphx/data/users.txt").map { line =>
	val fields = line.split(",")
	(fields(0).toLong, fields(1))
}

val ccByUsername = users.join(cc).map {
	case (id, (username, cc)) => (username, cc)
}

// Print the result
println(ccByUsername.collect().mkString("\n"))

---------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------
//
// Triangle Counting Example
//

//
// Reference:
// http://spark.apache.org/docs/latest/graphx-programming-guide.html#connected-components
//

//
// Use Case Description:
//
// A vertex is part of a triangle when it has two adjacent vertices with an edge between them. 
// GraphX implements a triangle counting algorithm in the TriangleCount object that determines 
// the number of triangles passing through each vertex, providing a measure of clustering. 
// We compute the triangle count of the social network dataset from the PageRank section. 
// Note that TriangleCount requires the edges to be in canonical orientation (srcId < dstId) 
// and the graph to be partitioned using Graph.partitionBy. 
// Also note that Graph.partitionBy is broken in Spark 1.0.0 due to SPARK-1931; 
// see the suggested workarounds above.


import org.apache.spark._
import org.apache.spark.graphx._
import org.apache.spark.rdd.RDD

// Define our own version of partitionBy to work around SPARK-1931
import org.apache.spark.HashPartitioner
def partitionBy[ED](edges: RDD[Edge[ED]], partitionStrategy: PartitionStrategy): RDD[Edge[ED]] = {
	val numPartitions = edges.partitions.size
	edges.map(e => (partitionStrategy.getPartition(e.srcId, e.dstId, numPartitions), e))
		.partitionBy(new HashPartitioner(numPartitions))
		.mapPartitions(_.map(_._2), preservesPartitioning = true)
}

// Join the triangle counts with the usernames
val users = sc.textFile("graphx/data/users.txt").map { line =>
	val fields = line.split(",")
	(fields(0).toLong, fields(1))
}

// Load the edges in canonical order and partition the graph for triangle count
val unpartitionedGraph = GraphLoader.edgeListFile(sc, "graphx/data/followers.txt", true)

// 
// Broken
//
// val graph = Graph(partitionBy(unpartitionedGraph.edges, PartitionStrategy.RandomVertexCut), unpartitionedGraph.vertices)
//


val graph = Graph(unpartitionedGraph.vertices, partitionBy(unpartitionedGraph.edges, PartitionStrategy.RandomVertexCut))


// Find the triangle count for each vertex
val triCounts = graph.triangleCount().vertices

val triCountByUsername = users.join(triCounts).map { case (id, (username, tc)) =>
	(username, tc)
}
// Print the result
println(triCountByUsername.collect().mkString("\n"))
---------------------------------------------------------------------------------------------------------


